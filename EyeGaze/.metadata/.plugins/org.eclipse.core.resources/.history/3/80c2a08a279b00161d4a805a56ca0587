import java.awt.*;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;


public class AnimatedBoat {
	//Constructor for AnimatedBoat
    public AnimatedBoat() {
    	//Swing likes to control its own thread so we use this to let it..
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                }

                JFrame frame = new JFrame("Stimulus Application");
                //Allows us to exit program by clicking x
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                //Sets layout of JFrame
                frame.setLayout(new BorderLayout());
                //Adds content to the content pane
                frame.add(new AnimationPane());
                //Pack sizes the frame so that all of its contents are at or above their preffered sizes
                frame.pack();
                //Places Frame in center of screen
                frame.setLocationRelativeTo(null);
                //Makes window full screen
                frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
                //Makes frame appear on screen
                frame.setVisible(true);
                
            }

        });
    }

    //JPanels are logical divisions of space (containers like a cell in a table)
    public class AnimationPane extends JPanel {
    	
    	//BufferedImage is the Java internal format for loading images. Gives an image an accessible buffer of image data
        private BufferedImage boat;
        private int xPos = 0;
        private int direction = 1;
        
        //Constructor
        public AnimationPane() {
            try {
            	//read in image
                boat = ImageIO.read(new File("adam.jpg"));
                //Define a swing timer to fire multiple action events after a specified delay
                //10 is the speed in ms, ActionListener is the ISR
                Timer timer = new Timer(10, new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        xPos += direction;
                        if (xPos + boat.getWidth() > getWidth()) {
                            xPos = getWidth() - boat.getWidth();
                            direction *= -1;
                        } else if (xPos < 0) {
                            xPos = 0;
                            direction *= -1;
                        }
                        repaint(100,100,100,100);
                    }

                });
                //Timer goes off several times
                timer.setRepeats(true);
                timer.setCoalesce(true);
                timer.start();
            } catch (IOException ex) {
            	System.out.println("woops");
                ex.printStackTrace();
            }
        }

        @Override
        public Dimension getPreferredSize() {
            return boat == null ? super.getPreferredSize() : new Dimension(boat.getWidth()* 4, 500);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            int y = getHeight() - boat.getHeight();
            g.drawImage(boat, xPos, y, this);

        }

    }

}